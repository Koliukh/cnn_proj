Структура:

├───data                  - данные для первого задания
│   ├───train
│   │   ├───clock
│   │   └───crocodile
│   └───val
│       ├───clock
│       └───crocodile
├───heap                  - данные для второго задания, содержит изображения обоих классов для поиска одинаковых
├───out                   - сюда складываются найденные изображения
CNN.py                    - основной скрипт для первого задания (классификация)
cnn_model                 - обученная модель для первого задания
cnn_model.py              - скрипт с моделью сети
cnn_model1                - обученная модель из второго адания
cnn_model1_w.h5           - коэффиценты для модели из второго задания
cnn_model_w.h5            - коэфиценты для модели из первого задания
find_similar_img.py       - основной скрипт для второго задания
Readme.txt
requirements.txt          - используемые библиотеки

1. В первой задаче:
    Основной скрипт CNN.py
    
    Модель для классификации описана в cnn_model.py 
    Разброс точности (accuracy) от эпохе к этохе достаточно большой, скорее всего данных не достаточно чтобы хорошо обучиться.
    Метод адаптации "adam" (пробовал разные, но разницы сильной не почувствовал)
    
    Изображения разбиты на на тестовую и валидационную подвыборки:
    тестовая(800) - .\data\train\(400 - часы, 400 - крокодилы), 
    валидационная(200) - .\data\val\(100 - часы, 100 - крокодилы), 
   
    получилось:
    Train accuracy      =  0.96
    Validation accuracy =  0.91
       
    С параметром  TRAIN_MODEL=True обучается новая модель
    С параметром  TRAIN_MODEL=False загружается предобученная модель
    
2. Во второй задаче
   Основной скрипт find_similar_img.py
   Модель для классификации описана в cnn_model.py  (как и в первой)
   Все изображения находятся в папке .\heap\ 
     
   Я выделил векторы признаков после сверточного слоя, в этом пространстве признаков 
   нашел центр (точка которая "вроде и часы, вроде и крокодил") и относително него, с помощью kNN нашел ближайшие изображения.
   В качестве метрики использовалось евклидово расстояние. Пробовал использовать угловую метрику, но получалось как-то совсем не похоже.
       
   количество похожих изображений для поиска задается:
   n_neighbors=15
   они рисуются в консоли и копируются в директорию .\out\
   С параметром  TRAIN_MODEL=True обучается новая модель
   С параметром  TRAIN_MODEL=False загружается предобученная модель
